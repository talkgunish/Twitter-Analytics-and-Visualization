# -*- coding: utf-8 -*-
"""Lab2-Network-Introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13jeeOj0Bl5ZMXUPE43KeUxZhml1YYxQ4
"""

import networkx as nx
G = nx.Graph()
G.add_node(1)
G.nodes

G.add_nodes_from([2,3,4,5])
G.number_of_nodes()

G.add_edge(1,2)
G.add_edges_from([(2,3),(1,3),(1,4)])

G.number_of_edges()

list(G.adj[1])

G.degree[1]

list(G.edges)

nx.draw_networkx(G)

nx.draw_networkx(G)

nx.draw_networkx(G)

nx.draw_networkx(G)

DG=nx.DiGraph()
DG.add_weighted_edges_from([(1,2,0.5), (3,1,0.75)])
DG.out_degree(1,weight='weight')

DG.degree(1,weight='weight')

DG.successors(1)

DG.neighbors(1)

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

dataFile = drive.CreateFile({id:'https://drive.google.com/file/d/1AxgRst3yoPShmCMAXKrO55HeDrWRPwfl/view?usp=sharing'})

print(dataFile)

from googleapiclient.discovery import build
drive_service = build('drive', 'v3')

file_id = '1AxgRst3yoPShmCMAXKrO55HeDrWRPwfl'
import io
from googleapiclient.http import MediaIoBaseDownload

request = drive_service.files().get_media(fileId=file_id)
downloaded = io.BytesIO()
downloader = MediaIoBaseDownload(downloaded, request)
done = False
while done is False:
  # _ is a placeholder for a progress object that we ignore.
  # (Our file is small, so we skip reporting progress.)
  _, done = downloader.next_chunk()

downloaded.seek(0)
print('Downloaded file contents are: {}'.format(downloaded.read()))

import pandas as pd
from io import StringIO

downloaded.seek(0)

df = pd.read_csv(StringIO(downloaded.read().decode("utf-8")), sep=" ", names = ["Start", "End"])

df

# Commented out IPython magic to ensure Python compatibility.
import collections
import numpy as np
import operator
import matplotlib.pyplot as plt
# %matplotlib inline



"""Degree Histogram:"""

def findDegreeDist(tempGraph):
  dictCount = dict()
  #*************degre of each node*************
  kDegree = dict(tempGraph.degree())
  #**************List of all possible degrees************
  kValues =  sorted(set(kDegree.values())) #sorted degree values
  for each in kDegree:
    temp = kDegree[each]
    if temp in dictCount.keys(): #counting all n_k for n_k/N
      dictCount[temp]+=1
    else:
        dictCount[temp] = 1
  nodeDivide = nx.number_of_nodes(tempGraph)#value of N
  for i in range(max(dictCount.keys())+1):
    if i not in dictCount.keys():
      dictCount[i]=0
  for each in dictCount.keys(): #n_k/N values
     dictCount[each] = dictCount[each]/ nodeDivide
  dictCount = collections.OrderedDict(sorted(dictCount.items()))
  x_axis = dictCount.keys()
  y_axis = dictCount.values()
  return x_axis,y_axis

k_xaxis,k_yaxis = findDegreeDist(G)
k_yaxis

plt.figure()
plt.yscale('log')
plt.xscale('log')
plt.plot([0,1,2,3],[0.2,0.2,0.4,0.2])#label='Degree Distribution Graph') #linewidth=0,markersize=8,color='#40a6d1')